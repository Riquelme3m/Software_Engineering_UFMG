services:
  database_base:
    container_name: ${DATABASE_CONTAINER_NAME}
    image: postgres:${DATABASE_VERSION}
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    networks:
      - api-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: ${RESTART_POLICY}

  api_base:
    container_name: ${API_CONTAINER_NAME}
    image: ${API_IMAGE_NAME}
    build:
      context: .
      dockerfile: api.dockerfile
      args:
        - NODE_VERSION=${NODE_VERSION}
        - API_PORT=${API_PORT}
        - ENVIRONMENT=${ENVIRONMENT}
        - DATABASE_URL=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_CONTAINER_NAME}:${DATABASE_PORT}/${DATABASE_NAME}?schema=public
        - SECRET_KEY=${SECRET_KEY}
        - JWT_EXPIRATION=${JWT_EXPIRATION}
    ports:
      - "${API_PORT}:${API_PORT}"
    networks:
      - api-network
      - client-network
    depends_on:
      database_base:
        condition: service_healthy
    restart: ${RESTART_POLICY}
    command: npm start

  client_base:
    container_name: ${CLIENT_CONTAINER_NAME}
    image: ${CLIENT_IMAGE_NAME}
    build:
      context: .
      dockerfile: client.dockerfile
      args:
        - NODE_VERSION=${NODE_VERSION}
        - NGINX_VERSION=${NGINX_VERSION}
        - ENVIRONMENT=${ENVIRONMENT}
        - API_URL=http://localhost:${API_PORT}
    ports:
      - "${CLIENT_PORT}:80"
    depends_on:
      - api_base
    networks:
      - client-network
      - nginx-network
    restart: ${RESTART_POLICY}
    command: nginx -g 'daemon off;'

  nginx_base:
    container_name: ${NGINX_CONTAINER_NAME}
    image: ${NGINX_IMAGE_NAME}
    build:
      context: .
      dockerfile: nginx.dockerfile
      args:
        - NGINX_VERSION=${NGINX_VERSION}
    ports:
      - "81:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/letsencrypt:/etc/nginx/letsencrypt
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
    depends_on:
      - client_base
    networks:
      - nginx-network
    restart: ${RESTART_POLICY}
    command: nginx -g 'daemon off;'

volumes:
  postgres_data:

networks:
  api-network:
  client-network:
  nginx-network:
